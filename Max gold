#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Function to solve the knapsack problem
int knapsack(int W, vector<int>& weights) {
    int n = weights.size();
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    // Fill the DP table
    for (int i = 1; i <= n; ++i) {
        for (int w = 0; w <= W; ++w) {
            dp[i][w] = dp[i - 1][w]; // Do not take the current item
            if (weights[i - 1] <= w) { // Check if the current item fits
                dp[i][w] = max(dp[i][w], dp[i - 1][w - weights[i - 1]] + weights[i - 1]);
            }
        }
    }

    return dp[n][W];
}

int main() {
    int W, n;
    cin >> W >> n;
    vector<int> weights(n);

    for (int i = 0; i < n; ++i) {
        cin >> weights[i];
    }

    cout << knapsack(W, weights) << endl;
    return 0;
}

